library(tidyverse)
library(here)
library(httr)
library(jsonlite)
# set directory
here::i_am("code/apifetch_censusdata.R")
# US Census Board API Key
# 6b04ff55736c418eed28d02b041d8a382d5b0319
USCB_APIkey <- "6b04ff55736c418eed28d02b041d8a382d5b0319"
# BASIC API FETCH -------------------------------------------------------------------
# Basic GET request to the API
#["DP02_0060PE",
#"Percent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!9th to 12th grade, no diploma",
#"SELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES"]
# USAGE --------------------------------------------------------------------------
year <- "2009"
variables <- c("DP02_0060PE", "DP03_0119PE")  # Add more variables as needed
# Loop through the variables and fetch data for each
for (var in variables) {
fetch_and_save_data(var, year, key)
}
# Loop through the variables and fetch data for each
for (var in variables) {
fetch_and_save_data(var, year, USCB_APIkey)
}
# FUNCTION: API FETCH and SAVE --------------------------------------------------------
fetch_and_save_data <- function(variable, year, key) {
print(paste0("fetching: ", year, "-", variable))
# construct the URL with the variable, year, and key dynamically
url <- paste0("https://api.census.gov/data/",
year,
"/acs/acs5/profile?get=",
variable,
"&for=county:*&key=",
key)
# make the API request
response <- GET(url)
# Parse the JSON response
data <- content(response,
as = "text",
encoding = "UTF-8")
json_data <- fromJSON(data)
# convert the JSON data to a dataframe
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
# create a dynamic filename based on the variable and year
file_name <- paste0(here("data/api_censusdata/"), year, "_", variable, ".csv")
# Save the dataframe as a CSV file
write.csv(df, file_name, row.names = FALSE)
cat("Saved:", file_name, "\n")  # Print a message for confirmation
Sys.sleep(3)
}
# USAGE --------------------------------------------------------------------------
year <- "2009"
variables <- c("DP02_0060PE", "DP03_0119PE")  # Add more variables as needed
# Loop through the variables and fetch data for each
for (var in variables) {
fetch_and_save_data(var, year, USCB_APIkey)
}
#<https://api.census.gov/data/2016/acs/acs1?get =group(B01001)&for=us:*>.
group_url <- "https://api.census.gov/data/2009/acs/acs5/profile?get=group(DP02*E)&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"
response <- GET(group_url)
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
#<https://api.census.gov/data/2016/acs/acs1?get =group(B01001)&for=us:*>.
group_url <- "https://api.census.gov/data/2009/acs/acs5/profile?get=group(DP02)&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"
response <- GET(group_url)
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
View(df)
file_name <- paste0(here("data/api_censusdata/2009_group(DP02).csv"))
write.csv(df, file_name, row.names = FALSE)
# 2009 API DP02 - Social ----------------------------------------------------------------
# load data
DP2_2009_5Y <- read_csv(here("data/api_censusdata/2009_group(DP02).csv"))
DP2_2009_5Y_edited <- DP2_2009_5Y %>%
select(-contains("Percent"),
-contains("Margin"),
-contains("GRANDPARENTS"))
names(DP2_2009_5Y_edited)
url <- "https://api.census.gov/data/2022/acs/acs5/profile/variables.xml"
response <- GET(url)
View(response)
library(xml2)
xml_data <- content(response, as = "text", encoding = "UTF-8")
parsed_xml <- read_xml(xml_data)
View(parsed_xml)
node_variables <- xml_find_all(parsed_xml, ".//var")
variable_ids <- xml_attr(node_variables, "xml:id")
variable_ids
variable_ids <- xml_attr(node_variables, "id")
node_variables
View(parsed_xml)
ns <- xml_ns(parsed_xml)
ns
node_variables <- xml_find_all(parsed_xml, "//d:vars/d:var", ns = ns)
node_variables <- xml_find_all(parsed_xml, "census-api/vars//var")
node_variables <- xml_find_all(parsed_xml, "//vars/var", ns = ns)
node_variables <- xml_find_all(parsed_xml, "//vars/var")
write_xml(parsed_xml, here("data/xml/test.xml"))
write_xml(parsed_xml, here("data/xml/test.xml"))
xml_data <- read_xml(response)
View(xml_data)
# Extract <var> nodes
var_nodes <- xml_find_all(xml_data, ".//d1:var", xml_ns(xml_data))
# Convert to a dataframe
df <- data.frame(
id = xml_attr(var_nodes, "id"),
label = xml_attr(var_nodes, "label"),
concept = xml_attr(var_nodes, "concept"),
predicate_type = xml_attr(var_nodes, "predicate-type"),
group = xml_attr(var_nodes, "group"),
limit = xml_attr(var_nodes, "limit"),
atributos = xml_attr(var_nodes, "attributes"),
stringsAsFactors = FALSE
)
View(df)
# FUNCTION: FETCH XML VARIABLE TAGS FROM API -------------------------------------
# Define the function
api_fetch_xmlvardata <- function(year, acs_type = "acs5") {
print(paste0("fetching variable keys for: ", year, "-", acs_type, "-", ))
# construct the URL dynamically
url <- paste0("https://api.census.gov/data/",
year,
"/acs/",
acs_type,
"/profile/variables.xml")
# fetch the XML data from URL
response <- GET(url)
as_xml <- read_xml(response)
print("xml landed")
return(as_xml)
}
# FUNCTION: CONVERT XML VARIABLE TAGS INTO DATAFRAME FORMAT --------------------------------
convert_xmlvardata_to_df <- function (xml_data){
print("extracting variable tags")
# Extract <var> nodes
var_nodes <- xml_find_all(xml_data, ".//d1:var",
xml_ns(xml_data))
# Convert to a dataframe
xml_as_dataframe <- data.frame(
var_id = xml_attr(var_nodes, "id"),
var_label = xml_attr(var_nodes, "label"),
concept = xml_attr(var_nodes, "concept"),
predicate_type = xml_attr(var_nodes, "predicate-type"),
group = xml_attr(var_nodes, "group"),
limit = xml_attr(var_nodes, "limit"),
attributes = xml_attr(var_nodes, "attributes"),
stringsAsFactors = FALSE)
print("dataframe ready")
return(xml_as_dataframe)
}
xml_2009 <- api_fetch_xmlvardata(2009)
# FUNCTION: FETCH XML VARIABLE TAGS FROM API -------------------------------------
# Define the function
api_fetch_xmlvardata <- function(year, acs_type = "acs5") {
print(paste0("querying api for xml variable keys: ", year, "-", acs_type))
# construct the URL dynamically
url <- paste0("https://api.census.gov/data/",
year,
"/acs/",
acs_type,
"/profile/variables.xml")
# fetch the XML data from URL
response <- GET(url)
as_xml <- read_xml(response)
print("xml landed")
return(as_xml)
}
# FUNCTION: CONVERT XML VARIABLE TAGS INTO DATAFRAME FORMAT --------------------------------
convert_xmlvardata_to_df <- function (xml_data){
print("extracting variable tags")
# Extract <var> nodes
var_nodes <- xml_find_all(xml_data, ".//d1:var",
xml_ns(xml_data))
# Convert to a dataframe
xml_as_dataframe <- data.frame(
var_id = xml_attr(var_nodes, "id"),
var_label = xml_attr(var_nodes, "label"),
concept = xml_attr(var_nodes, "concept"),
predicate_type = xml_attr(var_nodes, "predicate-type"),
group = xml_attr(var_nodes, "group"),
limit = xml_attr(var_nodes, "limit"),
attributes = xml_attr(var_nodes, "attributes"),
stringsAsFactors = FALSE)
print("dataframe ready")
return(xml_as_dataframe)
}
xml_2009 <- api_fetch_xmlvardata(2009)
var_labels_df <- convert_xmlvardata_to_df(xml_2009)
View(var_labels_df)
convert_xmlvardata_to_df <- function (xml_data){
print("extracting variable tags")
# Extract <var> nodes
var_nodes <- xml_find_all(xml_data, ".//d1:var",
xml_ns(xml_data))
# Convert to a dataframe
xml_as_dataframe <- data.frame(
var_id = xml_attr(var_nodes, "id"),
var_label = xml_attr(var_nodes, "label"),
concept = xml_attr(var_nodes, "concept"),
predicate_type = xml_attr(var_nodes, "predicate-type"),
group = xml_attr(var_nodes, "group"),
limit = xml_attr(var_nodes, "limit"),
attributes = xml_attr(var_nodes, "attributes"),
stringsAsFactors = FALSE)
xml_as_dataframe <- xml_as_dataframe %>%
arrange(var_id)
print("dataframe ready")
return(xml_as_dataframe)
}
var_labels_df <- convert_xmlvardata_to_df(xml_2009)
View(var_labels_df)
object_name_as_string <- deparse(substitute(var_labels_df))
object_name_as_string
convert_xmlvardata_to_df <- function (var_labels_df){
object_name_as_string <- deparse(substitute(var_labels_df))
file_path = paste0(here("data/api_censuslabels/csv_labels/"),
object_name_as_string)
write_csv(var_labels_df,
file_path)
}
write_labeldf_tocsv <- function (var_labels_df){
object_name_as_string <- deparse(substitute(var_labels_df))
file_path = paste0(here("data/api_censuslabels/csv_labels/"),
object_name_as_string)
write_csv(var_labels_df,
file_path)
}
# FUNCTION: FETCH XML VARIABLE TAGS FROM API -------------------------------------
# Define the function
api_fetch_xmlvardata <- function(year, acs_type = "acs5") {
print(paste0("querying api for xml variable keys: ", year, "-", acs_type))
# construct the URL dynamically
url <- paste0("https://api.census.gov/data/",
year,
"/acs/",
acs_type,
"/profile/variables.xml")
# fetch the XML data from URL
response <- GET(url)
as_xml <- read_xml(response)
print("xml landed")
return(as_xml)
}
# FUNCTION: CONVERT XML VARIABLE TAGS INTO DATAFRAME FORMAT --------------------------------
convert_xmlvardata_to_df <- function (xml_data){
print("extracting variable tags")
# Extract <var> nodes
var_nodes <- xml_find_all(xml_data, ".//d1:var",
xml_ns(xml_data))
# Convert to a dataframe
xml_as_dataframe <- data.frame(
var_id = xml_attr(var_nodes, "id"),
var_label = xml_attr(var_nodes, "label"),
concept = xml_attr(var_nodes, "concept"),
predicate_type = xml_attr(var_nodes, "predicate-type"),
group = xml_attr(var_nodes, "group"),
limit = xml_attr(var_nodes, "limit"),
attributes = xml_attr(var_nodes, "attributes"),
stringsAsFactors = FALSE)
xml_as_dataframe <- xml_as_dataframe %>%
arrange(var_id)
print("dataframe ready")
print("dataframe flushed to csv")
return(xml_as_dataframe)
}
var_labels_2009 <- convert_xmlvardata_to_df(xml_2009)
write_labeldf_tocsv <- function (var_labels_df){
object_name_as_string <- deparse(substitute(var_labels_df))
file_path = paste0(here("data/api_censuslabels/csv_labels/"),
object_name_as_string)
write_csv(var_labels_df,
file_path)
print(paste0("dataframe flushed to csv at: ",
file_path))
}
write_labeldf_tocsv <- var_labels_2009
write_labeldf_tocsv <- function (var_labels_df){
object_name_as_string <- deparse(substitute(var_labels_df))
file_path = paste0(here("data/api_censuslabels/csv_labels/"),
object_name_as_string)
write_csv(var_labels_df,
file_path)
print(paste0("dataframe flushed to csv at: ",
file_path))
}
write_labeldf_tocsv <- var_labels_2009
View(var_labels_df)
View(var_labels_2009)
# FUNCTION: SAVE VARIABLE TAGS DATAFRAME to CSV --------------------------------
write_labeldf_tocsv <- function (var_labels_df){
object_name_as_string <- deparse(substitute(var_labels_df))
file_path = paste0(here("data/api_censuslabels/csv_labels/"),
object_name_as_string,
".csv")
write_csv(var_labels_df,
file_path)
print(paste0("dataframe flushed to csv at: ",
file_path))
}
var_labels_2009 <- convert_xmlvardata_to_df(xml_2009)
# FUNCTION: CONVERT XML VARIABLE TAGS INTO DATAFRAME FORMAT --------------------------------
convert_xmlvardata_to_df <- function (xml_data){
print("extracting variable tags")
# Extract <var> nodes
var_nodes <- xml_find_all(xml_data, ".//d1:var",
xml_ns(xml_data))
# Convert to a dataframe
xml_as_dataframe <- data.frame(
var_id = xml_attr(var_nodes, "id"),
var_label = xml_attr(var_nodes, "label"),
concept = xml_attr(var_nodes, "concept"),
predicate_type = xml_attr(var_nodes, "predicate-type"),
group = xml_attr(var_nodes, "group"),
limit = xml_attr(var_nodes, "limit"),
attributes = xml_attr(var_nodes, "attributes"),
stringsAsFactors = FALSE)
xml_as_dataframe <- xml_as_dataframe %>%
arrange(var_id)
print("dataframe ready")
return(xml_as_dataframe)
}
var_labels_2009 <- convert_xmlvardata_to_df(xml_2009)
write_labeldf_tocsv <- var_labels_2009
object_name_as_string
# FUNCTION: SAVE VARIABLE TAGS DATAFRAME to CSV --------------------------------
write_labeldf_tocsv <- function (var_labels_df){
object_name_as_string <- deparse(substitute(var_labels_df))
file_path = paste0(here("data/api_censuslabels/csv_labels/"),
object_name_as_string,
".csv")
write_csv(var_labels_df,
file_path)
print(paste0("dataframe flushed to csv at: ",
file_path))
}
var_labels_2009 <- convert_xmlvardata_to_df(xml_2009)
write_labeldf_tocsv(var_labels_2009)
print("xml landed and saved")
# FUNCTION: FETCH XML VARIABLE TAGS FROM API -------------------------------------
# Define the function
api_fetch_xmlvardata <- function(year, acs_type = "acs5") {
print(paste0("querying api for xml variable keys: ", year, "-", acs_type))
# construct the URL dynamically
url <- paste0("https://api.census.gov/data/",
year,
"/acs/",
acs_type,
"/profile/variables.xml")
# fetch the XML data from URL
response <- GET(url)
as_xml <- read_xml(response)
file_path <- paste0(here("data/api_censuslabels/xml_labels/response_"),
year,
"_",
acs_type)
write_xml(as_xml,
file_path)
print("xml landed and saved at: data/api_censuslabels/xml_labels")
return(as_xml)
}
# USAGE
xml_2012 <- api_fetch_xmlvardata("2012")
var_labels_2012 <- convert_xmlvardata_to_df(xml_2012)
write_labeldf_tocsv(var_labels_2012)
# FUNCTION: FETCH XML VARIABLE TAGS FROM API -------------------------------------
# Define the function
api_fetch_xmlvardata <- function(year, acs_type = "acs5") {
print(paste0("querying api for xml variable keys: ", year, "-", acs_type))
# construct the URL dynamically
url <- paste0("https://api.census.gov/data/",
year,
"/acs/",
acs_type,
"/profile/variables.xml")
# fetch the XML data from URL
response <- GET(url)
as_xml <- read_xml(response)
print("xml landed")
file_path <- paste0(here("data/api_censuslabels/xml_labels/response_"),
year,
"_",
acs_type)
write_xml(as_xml,
file_path)
print("xml saved at: data/api_censuslabels/xml_labels")
return(as_xml)
}
# FUNCTION: CONVERT XML VARIABLE TAGS INTO DATAFRAME FORMAT --------------------------------
convert_xmlvardata_to_df <- function (xml_data){
print("extracting variable tags")
# Extract <var> nodes
var_nodes <- xml_find_all(xml_data, ".//d1:var",
xml_ns(xml_data))
# Convert to a dataframe
xml_as_dataframe <- data.frame(
var_id = xml_attr(var_nodes, "id"),
var_label = xml_attr(var_nodes, "label"),
concept = xml_attr(var_nodes, "concept"),
predicate_type = xml_attr(var_nodes, "predicate-type"),
group = xml_attr(var_nodes, "group"),
limit = xml_attr(var_nodes, "limit"),
attributes = xml_attr(var_nodes, "attributes"),
stringsAsFactors = FALSE)
xml_as_dataframe <- xml_as_dataframe %>%
arrange(var_id)
print("dataframe ready")
return(xml_as_dataframe)
}
# FUNCTION: SAVE VARIABLE TAGS DATAFRAME to CSV --------------------------------
write_labeldf_tocsv <- function (var_labels_df){
object_name_as_string <- deparse(substitute(var_labels_df))
file_path = paste0(here("data/api_censuslabels/csv_labels/"),
object_name_as_string,
".csv")
write_csv(var_labels_df,
file_path)
print(paste0("dataframe flushed to csv at: data/api_censuslabels/csv_labels"))
}
# USAGE
xml_2016 <- api_fetch_xmlvardata("2016")
var_labels_2016 <- convert_xmlvardata_to_df(xml_2016)
write_labeldf_tocsv(var_labels_2016)
# USAGE
xml_2020 <- api_fetch_xmlvardata("2020")
var_labels_2020 <- convert_xmlvardata_to_df(xml_2020)
write_labeldf_tocsv(var_labels_2020)
fetch_and_save_data <- function(variable, year, key) {
print(paste0("fetching: ", year, "-", variable))
# construct the URL with the variable, year, and key dynamically
url <- paste0("https://api.census.gov/data/",
year,
"/acs/acs5/profile?get=",
variable,
"&for=county:*&key=",
key)
# make the API request
response <- GET(url)
# parse the JSON response
data <- content(response,
as = "text",
encoding = "UTF-8")
json_data <- fromJSON(data)
# convert the JSON data to a dataframe
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
# create a dynamic filename based on the variable and year
file_name <- paste0(here("data/api_censusdata/"), variable, "_", year, ".csv")
# save the dataframe as a CSV file
write.csv(df, file_name, row.names = FALSE)
cat("Saved:",
variable,
"_",
year,
".csv")
Sys.sleep(3)
}
apifetch_censusdata <- function(variable, year, key) {
print(paste0("fetching: ", year, "-", variable))
# construct the URL with the variable, year, and key dynamically
url <- paste0("https://api.census.gov/data/",
year,
"/acs/acs5/profile?get=",
variable,
"&for=county:*&key=",
key)
# make the API request
response <- GET(url)
# parse the JSON response
data <- content(response,
as = "text",
encoding = "UTF-8")
json_data <- fromJSON(data)
# convert the JSON data to a dataframe
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
# create a dynamic filename based on the variable and year
file_name <- paste0(here("data/api_censusdata/"), variable, "_", year, ".csv")
# save the dataframe as a CSV file
write.csv(df, file_name, row.names = FALSE)
cat("Saved:",
variable,
"_",
year,
".csv")
Sys.sleep(3)
}
apifetch_censusdata(group(DP02),
"2012",
USCB_APIkey)
apifetch_censusdata("group(DP02)",
"2012",
USCB_APIkey)
# Loop through the variables and fetch data for each
years <- c("2009",
"2012",
"2016",
"2020")
groups <- c("group(DP02)",
"group(DP03)",
"group(DP04)",
"group(DP05)")
for (year in years){
for (group in groups){
apifetch_censusdata(group,
year,
USCB_APIkey)
}
}
