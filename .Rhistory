library(tidyverse)
library(here)
# set directory
here::i_am("code/exploration_votingdata.R")
county_pres <- read_csv(here("data/countypres_2000-2020.csv"))
# number of counties in each year
counties_in_year <- county_pres %>%
group_by(year) %>%
summarise(num_counties = n_distinct(county_name))
# this seems too good to be true; need to investigate
# looking at unique years in each county
year_county_combinations <- county_pres %>%
distinct(year, county_name)
# not so helpful; still a super manual task
#go one layer down and count how many distinct years each county has
counts_years <- county_pres %>%
group_by(county_name) %>%
summarise(year_counts = n_distinct(year))
# this looks pretty good
appearances_distribution <- counts_years %>%
group_by(year_counts) %>%
summarise(n_counties = n_distinct(county_name))
View(appearances_distribution)
DP2_2012_1Y <- read_csv(here("data/productDownload_2024-10-19T191219/ACSDP1Y2012.DP02-Data.csv"))
names(DP2_2012_1Y)
View(DP2_2012_1Y)
# load data
DP2_2012_5Y <- read_csv(here("data/productDownload_2024-10-19T191219/ACSDP5Y2012.DP02-Data.csv"))
DP2_2012_5Y <- read_csv(here("data/productDownload_2024-10-19T191219/ACSDP5Y2012.DP02-Data.csv"))
names(DP2_2012_5Y)
DP2_2012_5Y_edited <- DP2_2012_5Y %>%
select(-contains("Percent"),
-containts("Margin"))
DP2_2012_5Y_edited <- DP2_2012_5Y %>%
select(-contains("Percent"),
-contains("Margin"))
View(DP2_2012_5Y_edited)
names(DP2_2012_5Y)
names(DP2_2012_5Y)_edited
names(DP2_2012_5Y_edited)
View(DP2_2012_5Y_edited)
DP2_2012_5Y_edited <- DP2_2012_5Y %>%
select(-contains("Percent"),
-contains("Margin"),
-contains("GRANDPARENTS"))
names(DP2_2012_5Y_edited)
DP2_2013_5Y <- read_csv(here("data/productDownload_2024-10-19T191310/ACSDP5Y2012.DP03-Data.csv"))
DP2_2013_5Y_edited <- DP2_2013_5Y %>%
select(-contains("Percent"),
-contains("Margin"))
DP2_2013_5Y_edited <- DP2_2013_5Y %>%
select(-contains("Percent"),
-contains("Margin"))
names(DP2_2013_5Y_edited)
DP2_2013_5Y <- read_csv(here("data/productDownload_2024-10-19T191310/ACSDP5Y2012.DP03-Data.csv"))
DP2_2013_5Y_edited <- DP2_2013_5Y %>%
select(-contains("Percent"),
-contains("Margin"))
names(DP2_2013_5Y_edited)
# DP4 - Selected Housing ----------------------------------------------------------------
# load data
DP4_2012_5Y <- read_csv(here("data/productDownload_2024-10-19T191541/ACSDP5Y2012.DP04-Data-Data.csv"))
DP4_2012_5Y <- read_csv(here("data/productDownload_2024-10-19T191541/ACSDP5Y2012.DP04-Data.csv"))
DP4_2012_5Y_edited <- DP4_2012_5Y %>%
select(-contains("Percent"),
-contains("Margin"))
names(DP4_2012_5Y_edited)
# DP4 - Selected Housing ----------------------------------------------------------------
# load data
DP5_2012_5Y <- read_csv(here("data/productDownload_2024-10-19T191549/ACSDP5Y2012.DP05-Data.csv"))
DP5_2012_5Y_edited <- DP5_2012_5Y %>%
select(-contains("Percent"),
-contains("Margin"))
names(DP5_2012_5Y_edited)
Decennial_2000 <- read_csv(here("data/DECENNIALDPSF42000.DP1_2024-10-19T161201/DECENNIALDPSF42000.DP1-Data.csv"))
Decennial_2000_edited <- Decennial_2000 %>%
select(-contains("Percent"),
-contains("Margin"))
names(Decennial_2000_edited)
# US Census Board API Key
# 6b04ff55736c418eed28d02b041d8a382d5b0319
USCB_APIkey <- "6b04ff55736c418eed28d02b041d8a382d5b0319"
install.packages("httr")
library(httr)
install.packages("httr")
library(httr)
url <- "https://api.census.gov/data/2008/acs/acs1/profile?get=DP02&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"  # Example dataset from 2010
response <- GET(url)
View(response)
url <- "https://api.census.gov/data/2008/acs/acs1/profile?get=DP02_0067PE&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"  # Example dataset from 2010
response <- GET(url)
View(response)
url <- "https://api.census.gov/data/2016/acs/acs1/profile?get=DP02_0001PE&for=state:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"  # Example dataset from 2010
url <- "https://api.census.gov/data/2016/acs/acs1/profile?get=DP02_0001PE&for=state:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"  # Example dataset from 2010
response <- GET(url)
View(response)
data <- content(response, as = "text", encoding = "UTF-8")
data
library(jsonlite)
json_data <- fromJSON(data)
# Convert to a data frame
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
View(df)
url <- "https://api.census.gov/data/2008/acs/acs1/profile?get=DP02_0060PE&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
View(df)
url <- "https://api.census.gov/data/2008/acs/acs5/profile?get=DP02_0060PE&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
url <- "https://api.census.gov/data/2008/acs/acs1/profile?get=DP02_0060PE&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
url <- "https://api.census.gov/data/2016/acs/acs5/profile?get=DP02_0060PE&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"
url <- "https://api.census.gov/data/2016/acs/acs5/profile?get=DP02_0060PE&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
View(df)
url <- "https://api.census.gov/data/2009/acs/acs5/profile?get=DP02_0060PE&for=county:*&key=6b04ff55736c418eed28d02b041d8a382d5b0319"
response <- GET(url)
data <- content(response, as = "text", encoding = "UTF-8")
json_data <- fromJSON(data)
df <- as.data.frame(json_data[-1, ])  # Skip the first row (header)
colnames(df) <- json_data[1, ]  # Assign the first row as column names
View(df)
# loading
library(tidyverse)
library(here)
# set directory
here::i_am("code/exploration_votingdata.R")
county_pres <- read_csv(here("data/countypres_2000-2020.csv"))
# number of counties in each year
counties_in_year <- county_pres %>%
group_by(year) %>%
summarise(num_counties = n_distinct(county_name))
# this seems too good to be true; need to investigate
# looking at unique years in each county
year_county_combinations <- county_pres %>%
distinct(year, county_name)
# not so helpful; still a super manual task
#go one layer down and count how many distinct years each county has
counts_years <- county_pres %>%
group_by(county_name) %>%
summarise(year_counts = n_distinct(year))
# this looks pretty good
appearances_distribution <- counts_years %>%
group_by(year_counts) %>%
summarise(n_counties = n_distinct(county_name))
View(counties_in_year)
View(year_county_combinations)
View(county_pres)
View(counties_in_year)
year_county_combinations <- county_pres %>%
distinct(year, county_name) %>%
group_by(county_name) %>%
mutate(years_present = n_distinct(year))
View(year_county_combinations)
# looking at unique years in each county
year_fips_combinations <- county_pres %>%
distinct(year, county_fips) %>%
group_by(county_fips) %>%
mutate(years_present = n_distinct(year))
# not so helpful; still a super manual task
View(year_fips_combinations)
# number of counties in each year
counties_in_year <- county_pres %>%
group_by(year) %>%
summarise(num_counties = n_distinct(county_fips))
# this seems too good to be true; need to investigate
View(counties_in_year)
# looking at unique years in each county
year_fips_combinations <- county_pres %>%
distinct(year, county_fips) %>%
group_by(county_fips) %>%
mutate(years_present = n_distinct(year))
# not so helpful; still a super manual task
View(year_fips_combinations)
#go one layer down and count how many distinct years each county has
counts_years <- county_pres %>%
group_by(county_fips) %>%
summarise(year_counts = n_distinct(year))
# this looks pretty good
View(counts_years)
appearances_distribution <- counts_years %>%
group_by(year_counts) %>%
summarise(n_counties = n_distinct(county_fips))
View(appearances_distribution)
county_pres %>%
summarise(unique_count = n_distinct(county_name))
county_pres %>%
summarise(unique_count = n_distinct(county_fips)
)
county_pres <- read_csv(here("data/countypres_2000-2020.csv"))
county_pres %>%
summarise(unique_count = n_distinct(concat))
county_pres <- read_csv(here("data/countypres_2000-2020.csv"))
# USING FIPS ----------------------------------------------------------------
# number of counties in each year
counties_in_year <- county_pres %>%
group_by(year) %>%
summarise(num_counties = n_distinct(county_fips))
# this seems too good to be true; need to investigate
# looking at unique years in each county
year_fips_combinations <- county_pres %>%
distinct(year, county_fips) %>%
group_by(county_fips) %>%
mutate(years_present = n_distinct(year))
# not so helpful; still a super manual task
#go one layer down and count how many distinct years each county has
counts_years <- county_pres %>%
group_by(county_fips) %>%
summarise(year_counts = n_distinct(year))
# this looks pretty good
appearances_distribution <- counts_years %>%
group_by(year_counts) %>%
summarise(n_counties = n_distinct(county_fips))
View(counties_in_year)
View(counties_in_year)
View(counts_years)
View(county_pres)
View(year_fips_combinations)
View(appearances_distribution)
counties_troublesome <- year_fips_combinations %>%
filter(years_present < 6)
View(counties_troublesome)
# Function to count "null" values in each column
count_nulls <- function(col) {
sum(tolower(trimws(col)) == "null", na.rm = TRUE)
}
# Apply the function to each column in the dataframe
null_counts <- sapply(DP2_2012_5Y_edited, count_nulls)
# View the results
print(null_counts)
null_counts
